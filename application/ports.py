from typing import Protocol, Iterable, Callable
from domain.models import CameraConf, FileEvent

class CameraRepo(Protocol):
    def load_all(self) -> list[CameraConf]: ...
    def save_all(self, items: list[CameraConf]) -> None: ...
    def find_by_ip(self, ip: str) -> CameraConf | None: ...

class CountsRepo(Protocol):
    def append(self, row: dict) -> None: ...
    def read_range(self, t0: float, t1: float) -> Iterable[dict]: ...

class ImageStore(Protocol):
    def move_and_stamp(self, tmp_path: str, remote_ip: str, raw_name: str) -> str: ...
    def purge_older_than(self, seconds: float) -> int: ...

class EventSource(Protocol):
    def start(self, on_file: Callable[[FileEvent], None], on_log: Callable[[str], None]) -> None: ...
    def stop(self) -> None: ...
    def is_running(self) -> bool: ...
